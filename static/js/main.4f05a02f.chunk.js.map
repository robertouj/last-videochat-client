{"version":3,"sources":["Context.js","components/Chat.jsx","components/VideoChat.jsx","components/Sidebar.jsx","components/Notifications.jsx","App.js","index.js","lib/WebRTCScockets.js"],"names":["SocketContext","createContext","ContextProvider","children","useState","isSessionAvailable","setIsSessionAvailable","room","setRoom","stream","setStream","me","setMe","call","setCall","initCall","setInitCall","userToCall","setUserToCall","name","setName","remoteName","setRemoteName","chat","setChat","callButtonEnabled","hangupButtonEnabled","answerButtonEnabled","states","myVideo","useRef","userVideo","connectionRef","useEffect","checkSessionAvailability","getMe","signal","answerCall","callUser","Provider","value","startSession","roomId","window","location","hash","startSocket","createMedia","leaveCall","sendMessage","chatText","sendMessageChat","Chat","useContext","setChatText","className","Typography","gutterBottom","variant","map","msg","TextField","label","onChange","e","target","autoComplete","Button","color","fullWidth","onClick","VideoChat","playsInline","ref","autoPlay","Sidebar","disabled","startIcon","PhoneDisabled","fontSize","Phone","placeholder","Notifications","notification","style","display","justifyContent","App","ReactDOM","render","document","getElementById","io","require","Peer","socket","module","exports","video","navigator","mediaDevices","getUserMedia","audio","then","currentStream","current","srcObject","peer","initiator","trickle","on","data","emit","signalData","from","to","usersInRoom","id","callerName","isReceivingCall"],"mappings":"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","file":"static/js/main.4f05a02f.chunk.js","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from \"react\";\nimport {\n  callUser,\n  createMedia,\n  startSocket,\n  getMe,\n  answerCall,\n  sendMessageChat,\n} from \"./lib/WebRTCScockets\";\n\nconst SocketContext = createContext();\n\nfunction ContextProvider({ children }) {\n  const [isSessionAvailable, setIsSessionAvailable] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [stream, setStream] = useState();\n  const [me, setMe] = useState(\"\");\n  const [call, setCall] = useState({});\n  const [initCall, setInitCall] = useState(false);\n  const [userToCall, setUserToCall] = useState(false);\n  const [name, setName] = useState(\"Anonymous\");\n  const [remoteName, setRemoteName] = useState();\n  /********************** chat **********************/\n  const [chat, setChat] = useState([]);\n\n  //TODO: Here the object to control the visibility or enable/disable buttons\n  // // Set up initial action button\n  const [states, setStates] = useState({\n    callButtonEnabled: true,\n    hangupButtonEnabled: false,\n    answerButtonEnabled: false,\n  });\n\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n\n  useEffect(() => {\n    checkSessionAvailability();\n    getMe(setMe, setCall, setRemoteName);\n  }, []);\n\n  useEffect(() => {\n    if (call.signal)\n      answerCall(stream, call, userVideo, connectionRef, setRemoteName, name);\n  }, [call]);\n\n  useEffect(() => {\n    if (initCall && stream) {\n      if (userToCall)\n        callUser(\n          userToCall,\n          me,\n          name,\n          stream,\n          userVideo,\n          connectionRef,\n          call,\n          setRemoteName\n        );\n    }\n  }, [stream, initCall]);\n\n  const initRoom = (roomId) => {\n    window.location.hash = roomId;\n    setRoom(roomId);\n  };\n\n  /**\n   * Actions when the Start button is pressed\n   */\n  const startSession = () => {\n    //TODO: Control the states\n    // setStates({\n    //   ...states,\n    //   callButtonEnabled: false,\n    //   hangupButtonEnabled: true,\n    // });\n\n    initRoom(isSessionAvailable);\n    startSocket(\n      room,\n      setInitCall,\n      setUserToCall,\n      setChat,\n      name\n    );\n    createMedia(myVideo, setStream);\n  };\n\n  const checkSessionAvailability = () => {\n    //TODO: implement the uuid hash\n    // Now the has is faked\n    // Need Check with the database. If there isn't session, the process stop.\n    setIsSessionAvailable(\"#c9f2a12622782\");\n  };\n\n  //TODO: end the connection when click in the button, like in the example\n  const leaveCall = () => {\n    //TODO: Control the states\n    // setStates({\n    //   ...states,\n    //   hangupButtonEnabled: false,\n    //   callButtonEnabled: true,\n    // });\n  };\n\n  /********************** chat **********************/\n  const sendMessage = (chatText) => {\n    sendMessageChat([...chat, `${name}: ${chatText}`]);\n    setChat([...chat, `${name}: ${chatText}`]);\n  };\n\n  return (\n    <SocketContext.Provider\n      value={{\n        //TODO: Control the states\n        states,\n        myVideo,\n        userVideo,\n        name,\n        isSessionAvailable,\n        chat,\n        remoteName,\n        startSession,\n        leaveCall,\n        sendMessage,\n        setName,\n      }}\n    >\n      {children}\n    </SocketContext.Provider>\n  );\n}\n\nexport { ContextProvider, SocketContext };\n","import {\n  Button,\n  TextField,\n  Grid,\n  Typography,\n  Container,\n  Paper,\n} from \"@material-ui/core\";\nimport React, { useContext, useState } from \"react\";\nimport { SocketContext } from \"../Context\";\n\nfunction Chat() {\n  const { sendMessage, chat } = useContext(SocketContext);\n  const [chatText, setChatText] = useState(\"\");\n\n  return (\n    <>\n      <div className=\"main__chat_window\">\n        <div className=\"messages\">\n          <Typography gutterBottom variant=\"h6\">\n            Chat\n          </Typography>\n          <ul className=\"chat-messages\">\n            {!chat ? \"Start chatting...\" : chat.map((msg) => <li>{msg}</li>)}\n          </ul>\n        </div>\n      </div>\n      <div className=\"main__message_container\">\n        <Typography gutterBottom variant=\"h6\">\n          Send a message\n        </Typography>\n        <TextField\n          label=\"Text to send...\"\n          onChange={(e) => setChatText(e.target.value)}\n          className=\"chat-input\"\n          autoComplete=\"off\"\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          onClick={() => sendMessage(chatText)}\n          className=\"send-button\"\n        >\n          Send\n        </Button>\n      </div>\n    </>\n  );\n}\n\nexport default Chat;\n","import React, { useContext } from \"react\";\nimport Chat from \"./Chat\";\nimport { SocketContext } from \"../Context\";\n\nfunction VideoChat() {\n  const { myVideo, userVideo, name, remoteName } = useContext(SocketContext);\n\n  return (\n    <>\n      <div className=\"header\">\n        <div className=\"logo\">\n          <h3>VideoChat Component</h3>\n        </div>\n      </div>\n      <div className=\"main\">\n        <div className=\"main__left\">\n          <div className=\"videos__group\">\n            <div className=\"video-grid\">\n              <div className=\"video-grid__remote_video\">\n                <div>Remote name: {remoteName || \"NoName\"}</div>\n                {/* Video element where show the remote stream from RTCPeerconnection */}\n                <video\n                  playsInline\n                  ref={userVideo}\n                  autoPlay\n                  className=\"remote_video\"\n                />\n              </div>\n              <div className=\"video-grid__local_video\">\n                <div>My name: {name || \"NoName\"}</div>\n                {/* Video element where show the local stream from getUserMedia() */}\n                <video\n                  playsInline\n                  ref={myVideo}\n                  autoPlay\n                  className=\"local_video\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"options\">\n            <div className=\"options__left\"></div>\n            <div className=\"options__right\"></div>\n          </div>\n        </div>\n        <div className=\"main__right\">\n          <Chat />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default VideoChat;\n","import React, { useContext } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { Phone, PhoneDisabled } from \"@material-ui/icons\";\n\nimport { SocketContext } from \"../Context\";\n\nfunction Sidebar({ children }) {\n  const { states, startSession, setName, leaveCall, isSessionAvailable } =\n    useContext(SocketContext);\n\n  return (\n    <>\n      <div className=\"sidebar\">\n        <div className=\"sidebar__buttons\">\n          <Button\n            disabled={!states.hangupButtonEnabled}\n            variant=\"contained\"\n            color=\"secondary\"\n            startIcon={<PhoneDisabled fontSize=\"large\" />}\n            fullWidth\n            onClick={leaveCall}\n          >\n            Hang Up\n          </Button>\n          <Button\n            disabled={!isSessionAvailable}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Phone fontSize=\"large\" />}\n            fullWidth\n            onClick={startSession}\n          >\n            Create Session\n          </Button>\n        </div>\n        <div className=\"sidebar__name\">\n          <label>\n            Your Name:\n            <input\n              placeholder=\"Enter your name...\"\n              onChange={(e) => setName(e.target.value)}\n            />\n          </label>\n        </div>\n        {children}\n      </div>\n    </>\n  );\n}\n\nexport default Sidebar;\n","import React, { useContext } from \"react\";\nimport { SocketContext } from \"../Context\";\n\nfunction Notifications() {\n  const { notification, isSessionAvailable } = useContext(SocketContext);\n\n  return (\n    <>\n      <div className=\"sidebar__notifications\">\n        <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\n          <h2>Notifications: {notification || \"-\"}</h2>\n          <h3>{isSessionAvailable && \">> Mentoring available <<\"}</h3>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Notifications;\n","import VideoChat from \"./components/VideoChat\";\nimport Sidebar from \"./components/Sidebar\";\nimport Notifications from \"./components/Notifications\";\n\nimport \"./styles.css\";\n\nfunction App() {\n\n  return (\n    <>\n      <h1>Video Chat WebRTC</h1>\n      <VideoChat />\n      <Sidebar>\n        <Notifications />\n      </Sidebar>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport { ContextProvider } from './Context';\n\nReactDOM.render(\n  <ContextProvider>\n    <App />\n  </ContextProvider>,\n  document.getElementById('root'),\n);","/****************************************************************************\n * Initial setup\n ****************************************************************************/\n\nconst SERVER = \"http://localhost:5000\";\n//const SERVER = \"https://wbs-fp-videochat-test.herokuapp.com/\";\nconst io = require(\"socket.io-client\");\nconst Peer = require(\"simple-peer\");\nconst socket = io(SERVER);\n\n/****************************************************************************\n * Signaling server\n ****************************************************************************/\n\nfunction startSocket(roomId, setInitCall, setUserToCall, setChat, name) {\n  socket.emit(\"create or join\", roomId, name);\n  socket.on(\"room created\", () => {});\n\n  socket.on(\"ready\", (usersInRoom) => {\n    setInitCall(true);\n    setUserToCall(usersInRoom[0]);\n  });\n\n  /********************** chat **********************/\n  socket.on(\"chat message\", (msg) => {\n    setChat(msg);\n  });\n}\n\n/********************** chat **********************/\nfunction sendMessageChat(msg) {\n  socket.emit(\"chat message\", msg);\n}\n\n/****************************************************************************\n * User media (webcam)\n ****************************************************************************/\n\nfunction createMedia(video, setStream) {\n  navigator.mediaDevices\n    .getUserMedia({ video: true, audio: true })\n    .then((currentStream) => {\n      setStream(currentStream);\n      video.current.srcObject = currentStream;\n    });\n}\n\n/****************************************************************************\n * WebRTC peer connection and data channel\n ****************************************************************************/\n\nfunction callUser(\n  userToCall,\n  me,\n  name,\n  stream,\n  userVideo,\n  connectionRef,\n  call,\n  setRemoteName\n) {\n  const peer = new Peer({ initiator: true, trickle: false, stream });\n\n  peer.on(\"signal\", (data) => {\n    socket.emit(\"callUser\", {\n      userToCall: userToCall,\n      signalData: data,\n      from: me,\n      name,\n    });\n  });\n\n  peer.on(\"stream\", (currentStream) => {\n    userVideo.current.srcObject = currentStream;\n  });\n\n  socket.on(\"callAccepted\", (signal, to, name) => {\n    setRemoteName(name);\n    peer.signal(signal);\n  });\n\n  connectionRef.current = peer;\n}\n\nfunction answerCall(\n  stream,\n  call,\n  userVideo,\n  connectionRef,\n  setRemoteName,\n  name\n) {\n  const peer = new Peer({ initiator: false, trickle: false, stream });\n\n  peer.on(\"signal\", (data) => {\n    socket.emit(\"answerCall\", { signal: data, to: call.from, name });\n  });\n\n  peer.on(\"stream\", (currentStream) => {\n    userVideo.current.srcObject = currentStream;\n  });\n\n  peer.signal(call.signal);\n  connectionRef.current = peer;\n}\n\nfunction getMe(setMe, setCall, setRemoteName) {\n  socket.on(\"me\", (id) => setMe(id));\n\n  socket.on(\"callUser\", ({ from, name: callerName, signal }) => {\n    setCall({ isReceivingCall: true, from, name: callerName, signal });\n    if (callerName) setRemoteName(callerName);\n  });\n}\n\n/*********************************************************************************\n * Functions\n *********************************************************************************/\n\n//TODO: here can be placed the fucntion to generate the uuid\n// Create a random roomId if not already present in the URL.\n// function randomToken() {\n//   return Math.floor((1 + Math.random()) * 1e16)\n//     .toString(16)\n//     .substring(1);\n// }\n\nmodule.exports = {\n  createMedia,\n  callUser,\n  startSocket,\n  getMe,\n  answerCall,\n  sendMessageChat,\n};\n"],"sourceRoot":""}